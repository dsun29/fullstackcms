{"version":3,"sources":["app/actions/PostActions.jsx"],"names":["Save_Post_Action","post","console","log","dispatch","url","service_root_url","method","type","withCredentials","data","JSON","stringify","error","err","Save_Fail_Action","stack","success","response","Save_Succeed_Action","push","_id","Save_Start_Action","loading","loaded","Load_Posts_Action","condition","contentType","responseText","Load_Posts_Fail_Action","Load_Posts_Succeed_Action","posts","Load_Start_Action","Load_Single_Post_Action","postid","Init_Post","Load_Single_Post_Fail_Action","Load_Single_Post_Succeed_Action","Init_Post_Action","Remove_Post_Action"],"mappings":"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","file":"PostActions.jsx","sourceRoot":"/home/ubuntu/workspace","sourcesContent":["import reqwest from 'reqwest'\nimport {Open_Dialog, Close_Dialog, Open_Spinner, Close_Spinner } from './UserActions'\nimport config from '../../share/global_config'\nimport {browserHistory} from \"react-router\";\n\nexport const Save_Post_Action = (post) => {\n\t\n\tconsole.log(post);\n\t\n\treturn function (dispatch){\n\t\tdispatch(Open_Spinner());\n\t\treturn reqwest({\n            url: config.service_root_url + 'api/post',\n            method: 'post',\n            type: 'json',\n            withCredentials: true,\n            data: {post: JSON.stringify(post)},\n            error: function(err){\n                 console.log('error in save_post_action = ', err);\n                 dispatch(Close_Spinner())\n                 dispatch(Save_Fail_Action(err));\n                 dispatch(Open_Dialog('Failed to save post', err.stack, null));\n            },\n            \n            success: function (response) {\n            \tconsole.log('successfully saved post', response);\n    \n              \tdispatch(Close_Spinner());\n              \tdispatch(Save_Succeed_Action(response));\n              \tdispatch(Open_Dialog('Successfully Saved', 'The new post is successfully saved.', function(){browserHistory.push('/post/' + response._id + '?mode=edit'); dispatch(Close_Dialog());}));\n            }\n\n        })\n\t}\n}\n\nexport const Save_Succeed_Action = (post) => {\n\t\n\t\n\treturn {\n\t\ttype: 'SAVE_POST_SUCCEED',\n\t\tpost: post\n\t}\n}\n\nexport const Save_Fail_Action = (error) => {\n\treturn {\n\t\ttype: 'SAVE_POST_FAIL',\n\t\terror: error\n\t}\n}\n\nexport const Save_Start_Action = (error) => {\n\treturn {\n\t\ttype: 'SAVE_POST_START',\n\t\tloading: true,\n\t\tloaded: false\n\t}\n}\n\n\n/*********************************************************/\nexport const Load_Posts_Action = (condition) => {\n\treturn function (dispatch){\n\t\n\t\treturn reqwest({\n            url: config.service_root_url + 'api/posts',\n            method: 'get',\n            type: 'json',\n            contentType: 'application/x-www-form-urlencoded',\n            withCredentials: true,\n            data: condition,\n            error: function(err){\n                 dispatch(Open_Dialog('Failed to load posts', err.responseText, null));\n                 dispatch(Load_Posts_Fail_Action(err));\n            },\n            success: function (response) {\n              \tconsole.log(response);\n              \tdispatch(Load_Posts_Succeed_Action(response));\n            }\n\n        })\n\t}\n}\n\nexport const Load_Posts_Succeed_Action = (posts) => {\n\treturn {\n\t\ttype: 'LOAD_POSTS_SUCCEED',\n\t\tposts: posts\n\t}\n}\n\n\nexport const Load_Posts_Fail_Action = (error) => {\n\treturn {\n\t\ttype: 'LOAD_POSTS_FAIL',\n\t\terror: error\n\t}\n}\n\nexport const Load_Start_Action = () => {\n\treturn {\n\t\ttype: 'LOAD_POSTS_START'\n\t\t\n\t}\n}\n\n\n/*********************************************************/\nexport const Load_Single_Post_Action = (postid) => {\n\t\n\tif(postid == null || postid == ''){\n\t\tdispatch(Init_Post());\n\t\treturn;\n\t}\n\n\treturn function (dispatch){\n\t\n\t\treturn reqwest({\n            url: config.service_root_url + 'api/post/' + postid,\n            method: 'get',\n            type: 'json',\n            contentType: 'application/x-www-form-urlencoded',\n            withCredentials: true,\n            error: function(err){\n                 dispatch(Open_Dialog('Failed to load the post', err.responseText, null));\n                 dispatch(Load_Single_Post_Fail_Action(err));\n            },\n            success: function (response) {\n              \tconsole.log(response);\n              \tdispatch(Load_Single_Post_Succeed_Action(response));\n            }\n\n        })\n\t}\n}\n\nexport const Load_Single_Post_Succeed_Action = (post) => {\n\treturn {\n\t\ttype: 'LOAD_SINGLE_POST_SUCCEED',\n\t\tpost: post\n\t}\n}\n\n\nexport const Load_Single_Post_Fail_Action = (error) => {\n\treturn {\n\t\ttype: 'LOAD_SINGLE_POST_FAIL',\n\t\terror: error\n\t}\n}\n\nexport const Init_Post_Action = () => {\n\treturn {\n\t\ttype: 'INIT_POST'\n\t}\n}\n\n/********************************************************************************/\nexport const Remove_Post_Action = (postid) => {\n\t\n\t\n\treturn function (dispatch){\n\t\tdispatch(Open_Spinner());\n\t\treturn reqwest({\n            url: config.service_root_url + 'api/post/' + postid,\n            method: 'delete',\n            type: 'json',\n            withCredentials: true,\n            data: {post: JSON.stringify(post)},\n            error: function(err){\n                 console.log('error in save_post_action = ', err);\n                 dispatch(Close_Spinner())\n                 dispatch(Save_Fail_Action(err));\n                 dispatch(Open_Dialog('Failed to save post', err.stack, null));\n            },\n            \n            success: function (response) {\n            \tconsole.log('successfully saved post', response);\n    \n              \tdispatch(Close_Spinner());\n              \t//dispatch(Save_Succeed_Action(response));\n              \t//dispatch(Open_Dialog('Successfully Saved', 'The new post is successfully saved.', function(){browserHistory.push('/post/' + response._id + '?mode=edit'); dispatch(Close_Dialog());}));\n            }\n\n        })\n\t}\n}\n\n"]}